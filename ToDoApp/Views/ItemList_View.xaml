<UserControl x:Class="ToDoApp.Views.ItemList_View"  
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ToDoApp.Views"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="350" d:DesignWidth="525"
             xmlns:prism="http://prismlibrary.com/"
             prism:ViewModelLocator.AutoWireViewModel="True">

    <UserControl.Resources>
        <!--<Style TargetType="Button" x:Key="GelButton" >-->
        <Style x:Name="ButtonVisibility" x:Key="VisButton" TargetType="Button">
            <Setter Property="Opacity" Value=".5" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True">
                    <Setter Property="Opacity" Value="1" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="RowOverdue" TargetType="DataGridRow">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=id}" Value="2">
                    <Setter Property="Background" Value="Red" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=id}" Value="1">
                    <Setter Property="Background" Value="Orange" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RowDue" TargetType="DataGridRow">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=id}" Value="1">
                    <Setter Property="Background" Value="Orange" />
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="BoxClear" TargetType="TextBox">
            <Setter Property="Opacity" Value="1" />
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsFocused" Value="False" />
                        <Condition Property="Text" Value="" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Opacity" Value=".5" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>


    </UserControl.Resources>

    <Grid>
        <Grid Margin="0,0,0.4,-0.2">
            <Grid.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF7B97D4" />
                    <GradientStop Color="#FF244C8D" Offset="1" />
                </LinearGradientBrush>
            </Grid.Background>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <!--<ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="5" />-->
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Text="ToDo List View" TextWrapping="Wrap" Grid.RowSpan="1" Grid.ColumnSpan="2" FontSize="18" Foreground="#FF2F3806" Margin="8,8,8,8" />

            <!--ToDoItemList-->
            <!--ItemsSource="{Binding Path=ItemsCV}"     "{Binding }"  -->
            <DataGrid x:Name="ToDoGrid" 
                    d:DataContext="{d:DesignData Source=MockData.xaml, IsDesignTimeCreatable=True}"
                    ItemsSource="{Binding Path=ItemsCV}"
                            Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" SelectionMode="Single"
                           AutoGenerateColumns="False" Margin="8"
                           AutomationProperties.AutomationId="ToDoListGrid" IsReadOnly="True"
                      RowStyle="{StaticResource RowOverdue}" >


                <!--"{Binding Path=id}"-->
                <DataGrid.Columns>
                    <DataGridTextColumn Header="#" Binding="{Binding Path=id}" IsReadOnly="True" Width="Auto" />
                    <DataGridTextColumn Header="Task" Binding="{Binding Path=task}" IsReadOnly="True" Width="*" />
                    <DataGridTextColumn Header="Due Date" Binding="{Binding Path=dueDate,StringFormat=MM/dd/yyyy}" IsReadOnly="True" Width="Auto" />
                    <DataGridTemplateColumn Width="Auto">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Margin="1,0,1,0">
                                    <Button x:Name="detailsButton" Content="Details" Command="{Binding Path=DataContext.GoDetailCommand, 
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}" IsEnabled="{Binding ElementName=ToDoGrid, Path=SelectedItem}" 
                                            Style="{StaticResource VisButton}" />

                                    <Button x:Name="completeButton" Content="Complete" Command="{Binding Path=DataContext.GoCompleteCommand, 
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}" IsEnabled="{Binding ElementName=ToDoGrid, Path=SelectedItem}"
                                            Style="{StaticResource VisButton}" />

                                    <Button x:Name="deleteButton" Content="Delete" Command="{Binding Path=DataContext.GoDeleteCommand, 
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}" IsEnabled="{Binding ElementName=ToDoGrid, Path=SelectedItem}" 
                                            Style="{StaticResource VisButton}" />
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
            <TextBlock x:Name="SearchBlock" Grid.Row="1" Grid.Column="0" Height="20" Margin="12,0,4,0"
                     Text="Search Tasks..." />
            <TextBox x:Name="textBox" Grid.Row="1" Grid.Column="0" Height="20" TextWrapping="Wrap" Margin="8,0,8,0"
                     Text="{Binding FilterString, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Focusable="True" 
                     Style="{StaticResource BoxClear}" />
            <Button x:Name="addButton" Content="Add Item" Command="{Binding GoAddItemCommand}" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" Margin="1,10,8.4,11" VerticalAlignment="Center" Width="75"/>
            <Button x:Name="statsButton" Content="Stats" Command="{Binding GoStatsCommand}" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" Margin="1,10,83.4,11" Width="75"/>
            <Button x:Name="selectionButton" Content="Select..." Command="{Binding GoSelectCommand}" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" Margin="1,10,158.4,11" Width="75" />
        </Grid>
    </Grid>
</UserControl>



<!--<i:Interaction.Triggers>
    <i:EventTrigger EventName="SelectionChanged">
        <prism:InvokeCommandAction Command="{Binding PersonSelectedCommand}" CommandParameter="{Binding SelectedItem, ElementName=_listOfPeople}" />
    </i:EventTrigger>
</i:Interaction.Triggers>-->