

C# snippets  
ctor: Default constructor
prop: Property
propg: Read only property
sim: static int main method
svm: static void main method
~:	Destructor 
	
try
if
else
for
foreach
mbox - Message box stub

http://www.developer.com/net/net/article.php/3557701/Introducing-Visual-Studio-2005-IntelliSense-Code-Snippets.htm

#if		Creates a #if directive and a #endif directive
#region	Creates a #region directive and a #endregion directive
~		Creates a destructor for the containing class
attribute	Creates a declaration for a class that derives from Attribute
checked	Creates a checked block
class	Creates a class declaration
ctor	Creates a constructor for the containing class
cw		Creates a call to WriteLine
do		Creates a do while loop
else	Creates an else block
enum	Creates an enum declaration
equals	Creates a method declaration that overrides the Equals method defined in the Object class
exception	Creates a declaration for a class that derives from an exception (Exception by default)
for		Creates a for loop
foreach	Creates a foreach loop
forr	Creates a for loop that decrements the loop variable after each iteration
if		Creates an if block
indexer	Creates an indexer declaration
interface	Creates an interface declaration
invoke	Creates a block that safely invokes an event
iterator	Creates an iterator
iterindex	Creates a "named" iterator and indexer pair by using a nested class
lock	Creates a lock block
mbox	Creates a call to System.Windows.Forms.MessageBox.Show (You may need to add a reference to System.Windows.Forms.dll.)
namespace	Creates a namespace declaration
prop	Creates a property declaration and a backing field
propg	Creates a property declaration with only a "get" accessor and a backing field
sim		Creates a static int Main method declaration
struct	Creates a struct declaration
svm		Creates a static void Main method declaration
switch	Creates a switch block
try		Creates a try-catch block
tryf	Creates a try-finally block
unchecked	Creates an unchecked block
unsafe	Creates an unsafe block
using	Creates a using directive
while	Creates a while loop


http://www.nbdtech.com/Free/WpfBinding.pdf

DataContext="ItemList_ViewModel"
DataContext="{Binding RelativeSource={RelativeSource Self}}"
IsChecked="{Binding ConfigurationModel.UseSensorLength, Mode=TwoWay}"
IsEnabled="{Binding ConfigurationModel.DontUseSensorLength}" 
<TextBox Name="TextBox" Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UCName:UCName}}, Path=DP1, Mode=TwoWay}"/>



<MainWindow DataContext="mainViewModel">
 <local:TestControl ucDependProp="{Binding viewModelProp}/>
</MainWindow>

className: TestControl.xaml
<UserControl Name="thisControl">
<TextBox Text="{Binding ElementName=thisControl, Path=ucDependProp}/>
</UserControl>



using Microsoft.TeamFoundation.MVVM
            //IDialogService.ShowDialog<string>;
            //IDialogService.ShowDialog;
            //IDialogService.Show;
            //Func<INotifyPropertyChanged, Type>
            //     md:DialogServiceViews.IsRegistered = "True"

                //MyNamespace.ViewModels.MyDialogViewModel => MyNamespace.Views.MyDialog, or default locator can be overridden by specifying implementation in the constructor of DialogService
        

   private readonly IDialogService dialogService;

        public ModalDialogTabContentViewModel(IDialogService dialogService)
        {
            this.dialogService = dialogService;
        }

        private void ShowDialog()
        {
            var dialogViewModel = new AddTextDialogViewModel();

            bool? success = dialogService.ShowDialog<AddTextDialog>(this, dialogViewModel));
            if (success == true)
            {
                Texts.Add(dialogViewModel.Text);
            }
        }


		<DataGrid HorizontalAlignment="Left" Margin="84,57,0,0" VerticalAlignment="Top" Height="183" Width="346" AutoGenerateColumns="False"
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                  mc:Ignorable="d" 
                  d:DataContext="{d:DesignData Source=SampleData.xaml, IsDesignTimeCreatable=True}"
                  ItemsSource="{Binding}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Column1" Binding="{Binding Column1}"></DataGridTextColumn>


SampleData.xaml:
<local:DataGridRows xmlns:local="clr-namespace:WpfApplication8">
    <local:DataGridRow Column1="AAAA"/>
</local:DataGridRows>

<UserControl.Resources>
    <CollectionViewSource x:Key="UsageTypeSource"/>
</UserControl.Resources>

<UserControl.Resources>
<XmlDataProvider x:Key="MockList"   XPath="/MockObjects/*" >
        <x:XData >
            <MockObjects xmlns="">
                <MockObject  Name="Louis" Type="TTTT" Number="1" />
                <MockObject Name="Joseph" Type="TTTT" Number="2" />
                <MockObject Name="Papineau" Type="ZZZZ" Number="3" />
            </MockObjects>
        </x:XData>
    </XmlDataProvider>
</UserControl.Resources>

<Grid DataContext="{Binding Source={StaticResource MockList}}">
    <DataGrid HorizontalAlignment="Stretch" Margin="10" VerticalAlignment="Stretch" 
              ItemsSource="{Binding Mode=Default, XPath=/MockObjects/MockObject}" 
              AutoGenerateColumns="False">
        <DataGrid.Columns>
            <DataGridTextColumn Header="Name" Binding="{Binding XPath=@Name}" ></DataGridTextColumn>
            <DataGridTextColumn Header="Type" Binding="{Binding XPath=@Type}"></DataGridTextColumn>
            <DataGridTextColumn Header="Number" Binding="{Binding XPath=@Number}"></DataGridTextColumn>
        </DataGrid.Columns>
    </DataGrid>
</Grid>


<UserControl.Resources>
    <ResourceDictionary>
        <x:Array x:Key="MockedList" Type="local:MockRecord">
            <local:MockRecord id="1." task="Fred Flintstone" />
            <local:MockRecord id="2." task="Wilma Flintstone" />
            <local:MockRecord id="3." task="Barney Rubble" />
        </x:Array>
    </ResourceDictionary>
</UserControl.Resources>
<Grid>
    <DataGrid  Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
               ItemsSource="{Binding Source={StaticResource MockedList}}"/>
</Grid>




<Button.Style>
                                            <Style TargetType="Button">
                                                <Setter Property="IsEnabled" Value="True" />
                                                <Setter Property="Opacity" Value="1" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=ToDoGrid, Path=SelectedItem}" Value="{x:Null}">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                        <Setter Property="Opacity" Value=".5" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>


<Button x:Name="completeButton" Content="Complete" Command="{Binding GoDetailCommand}">
                                        <Button.Style>
                                            <Style x:Name="ButtonVisibility">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                                
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True">
                                                        <Setter Property="Button.Visibility" Value="Visible"/>
                                                        
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>


<Style TargetType="Button">
                                                <Setter Property="IsEnabled" Value="False" />
                                                <Setter Property="Opacity" Value=".5" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True">
                                                        <Setter Property="IsEnabled" Value="True" />
                                                        <Setter Property="Opacity" Value="1" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>



<Window
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:src="clr-namespace:SDKSample"
  SizeToContent="WidthAndHeight"
  Title="Simple Data Binding Sample">

<Window.Resources>
    <src:Person x:Key="myDataSource" PersonName="Joe"/>
</Window.Resources>


MethodName 
<ObjectDataProvider x:Key="myDataSource" ObjectType="{x:Type src:Person}">
  <ObjectDataProvider.ConstructorParameters>
    <system:String>Joe</system:String>
  </ObjectDataProvider.ConstructorParameters>
</ObjectDataProvider>


XAML
<TextBlock Text="{Binding Source={StaticResource myDataSource}, Path=PersonName}"/>




Binding="{Binding Path=., Converter={StaticResource myFileExtensionConverter}, ConverterParameter=old}" Value="True"


Commit:
Fixed CollectionView error of event handling assignment. Was using object new EventHandler unnecessarily. 
Had this.ItemsCV.CurrentChanged += new EventHandler(this.ItemSelected); when needed this.ItemsCV.CurrentChanged += ItemSelected; 

Status Update
Needs - ToDo
1. update color style triggers
2. update button styles
3. Update todoitem properties for INotifyPropertyChanged
4. Update listService to toggle completion and sync data.
5. Remove unused buttons
6. Remove unnecessary comments

Test:
See if row colors change - listview
See if completed date changes with toggle - detailsview
MessageBox - return without saving - addview
Status Textblock - listview

Textbox animate

-----
List color update
Submit button disable and animate
ContentDirty / saveDirty - Save/Return messages
Update highlighting after data change or based on current date/time change.  




// ObjectDataProvider - ObjectInstance property - XAML object instantiation


//< prism:InteractionRequestTrigger SourceObject = "{Binding CustomPopupViewRequest, Mode=OneWay}" >
//    < prism:PopupWindowAction >
//        < prism:PopupWindowAction.WindowContent >
//            < views:CustomPopupView />
//        </ prism:PopupWindowAction.WindowContent >
//    </ prism:PopupWindowAction >
// </ prism:InteractionRequestTrigger >

//        < local:PopupPanel
// Content = "{Binding PopupContent}"
//local: PopupPanel.PopupParent = "{Binding ElementName=SomeParentPanel}"
//local: PopupPanel.IsPopupVisible = "{Binding IsPopupVisible}" >


// < local:PopupPanel.Resources >

//      < DataTemplate DataType = "{x:Type local:SomeViewModel}" >

//           < local:SomeView />

//        </ DataTemplate >

//        < DataTemplate DataType = "{x:Type local:DifferentViewModel}" >

//             < local:DifferentView />

//          </ DataTemplate >

//      </ local:PopupPanel.Resources >
//   </ local:PopupPanel >


 //public delegate void PropertyChangedHandler(object newValue);
        //public event PropertyChangedHandler listChanged;

        //private void addItem_Click(object sender, RoutedEventArgs e)
        //{
        //    //var view = _container.Resolve<ItemList_View>();
        //    //IRegion region = _regionManager.Regions["ContentRegion"];
        //    //region.Add(view);

        //    //--View Injection 
        //    //IRegion region = _regionManager.Regions["ContentRegion"];
        //    //var view = _container.Resolve<ItemList_View>();
        //    //region.Add(view);

        //    //var view2 = _container.Resolve<AddItem_View>();
        //    //region.RequestNavigate(new Uri("AddItem_View", UriKind.Relative));
        //}




